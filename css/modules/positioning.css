/*
Polar positioning

Positions direct children of the target element at the point with radius
`--rho-em`, and angle `--theta-deg` (clockwise from the upward vertical) with
respect to the closest positioned ancestor, without rotating them.

Inputs:

  - `--theta-deg`: angular coordinate (clockwise from the upward vertical)
  - `--rho-em`: radial coordinate

**Note**: The children are position right inside the radius `--rho-em`. This is
because positioning them (partly) outside, exposes them to be overlapped with
other elements. This way, instead, if the positioned ancestor does not overlap,
they shouldn't overlap as well, as they are totally inside of it.

Markup:
<style>
#dummy {
  width: 10em;
  height: 10em;
  border-radius: 100%;
  display: block;
  content: '';
  border: 1px solid black;
}
#dummy > div > div {
  display: block;
  content: '';
  width: 1em;
  height: 1em;
  background-image: linear-gradient(225deg, black 50%, transparent 50%);
}
</style>
<div id="dummy" style="--rho-em: 5; position: relative;">
  <div class="polar-position" style="--theta-deg: 0;"><div></div></div>
  <div class="polar-position" style="--theta-deg: 1;"><div></div></div>
  <div class="polar-position" style="--theta-deg: 2;"><div></div></div>
  <div class="polar-position" style="--theta-deg: 3;"><div></div></div>
  <div class="polar-position" style="--theta-deg: 5;"><div></div></div>
  <div class="polar-position" style="--theta-deg: 8;"><div></div></div>
  <div class="polar-position" style="--theta-deg: 13;"><div></div></div>
  <div class="polar-position" style="--theta-deg: 21;"><div></div></div>
  <div class="polar-position" style="--theta-deg: 34;"><div></div></div>
  <div class="polar-position" style="--theta-deg: 55;"><div></div></div>
  <div class="polar-position" style="--theta-deg: 89;"><div></div></div>
  <div class="polar-position" style="--theta-deg: 144;"><div></div></div>
  <div class="polar-position" style="--theta-deg: 233;"><div></div></div>
</div>

Styleguide Maths and geometry.polar-position
*/

.polar-position {
  top: 50%;
  left: 50%;
  position: absolute;
  transform-origin: 0 0;
  transform: rotate(calc(var(--theta-deg) * 1deg))
             translate(-50%, calc(-1 * var(--rho-em) * 1em));
  --minus-theta-deg: calc((-1) * var(--theta-deg));
}

.polar-position > * {
  transform: rotate(calc(var(--minus-theta-deg) * 1deg));
}

/*
Center element (or its ::after) in ancestor

Moves the origin of the target element to the center of closest positioned
ancestor element.

**Note**: The example below includes a `<style>` to target the element and its
pseudo-element by id, because pseudo-elements can't be created in HTML; you need
not copy it, and would apply `display: block`, `content: ''`, and whatever else
is needed via other selectors.

Markup:
<style>
#pseudo-element-owner,
#pseudo-element-owner::after {
  display: block;
  content: '';
  width: 1em;
  height: 1em;
  background-image: linear-gradient(225deg, white 50%, transparent 50%);
}
#pseudo-element-owner::after {
  background-image: linear-gradient(45deg, white 50%, transparent 50%);
}
</style>
<div style="position: relative; display: block; content: ''; width: 5em; height: 5em; background-color: black">
<div class="center-origin {{modifier_class}}" id="pseudo-element-owner">
</div>
</div>

.center-origin--after  - Only applies to the `::after` pseudo-element of the target element.

Styleguide Positioning.center-in-container
*/

.center-origin {
  top: 50%;
  left: 50%;
  position: absolute;
}

.center-origin--after {
  top: unset;
  left: unset;
  position: unset;
}

.center-origin--after::after {
  top: 50%;
  left: 50%;
  position: absolute;
}
