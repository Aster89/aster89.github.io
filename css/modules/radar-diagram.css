.trigonometry * {
  /* https://gist.github.com/stereokai/7666bfe93929b14c2dced148c79e0e97 */
  --alpha: calc(var(--alpha-deg) * 3.141593 / 180);
  --alpha-half: calc(var(--alpha)/2);
  --tan-term1: var(--alpha-half);
  --tan-term2: calc((1/3) * var(--alpha-half) * var(--alpha-half) * var(--alpha-half));
  --tan-term3: calc((2 / 15) * var(--alpha-half) * var(--alpha-half) * var(--alpha-half) * var(--alpha-half) * var(--alpha-half));
  --tan-term4: calc((17/315) * var(--alpha-half) * var(--alpha-half) * var(--alpha-half) * var(--alpha-half) * var(--alpha-half) * var(--alpha-half) * var(--alpha-half));
  --t: calc(var(--tan-term1) + var(--tan-term2) + var(--tan-term3) + var(--tan-term4));
  --sin-alpha: calc(2 * var(--t) / (1 + var(--t) * var(--t)));
  /*--cos-alpha: calc((1 - var(--t) * var(--t)) / (1 + var(--t) * var(--t)));*/
}

.round-canvas {
  display: block;
  content: '';
  position: relative;
  /* radius is assumed to be in `em`, but the unit can't be given explicitly; see below the reason */
  --radius-em: 10;
  --line-width: 0.5px;
  margin: 2.5em auto;
  height: calc(2em * var(--radius-em) + var(--line-width));
  width: calc(2em * var(--radius-em) + var(--line-width));
  border-radius: 100%;
  /* similary, angles can't explicitly use the `deg` unit */
  --alpha-deg: calc(360 / var(--n));
  background: linear-gradient(30deg,  transparent calc(50% - var(--line-width)), var(--panel-bg-color-lighter) calc(50% - var(--line-width) / 2), var(--panel-bg-color-lighter) calc(50% + var(--line-width) / 2), transparent calc(50% + var(--line-width)), transparent 100%),
              linear-gradient(90deg,  transparent calc(50% - var(--line-width)), var(--panel-bg-color-lighter) calc(50% - var(--line-width) / 2), var(--panel-bg-color-lighter) calc(50% + var(--line-width) / 2), transparent calc(50% + var(--line-width)), transparent 100%),
              linear-gradient(150deg, transparent calc(50% - var(--line-width)), var(--panel-bg-color-lighter) calc(50% - var(--line-width) / 2), var(--panel-bg-color-lighter) calc(50% + var(--line-width) / 2), transparent calc(50% + var(--line-width)), transparent 100%),
              repeating-radial-gradient(var(--panel-bg-color-lighter), var(--panel-bg-color-lighter) calc(var(--line-width) / 2), transparent var(--line-width), transparent calc(1em * var(--radius-em) / 5 - var(--line-width)), var(--panel-bg-color-lighter) calc(1em * var(--radius-em) / 5 - var(--line-width) / 2), var(--panel-bg-color-lighter) calc(1em * var(--radius-em) / 5));
}

/*.round-canvas::before {
  display: block;
  content: '';
  height: calc(3.5em + 2em * var(--radius-em));
  width: calc(3.5em + 2em * var(--radius-em));
  border-radius: 100%;
  position: absolute;
  left: 50%;
  top: 50%;
  transform-origin: 0 0;
  transform: translate(-50%,-50%);
  border: 1px solid black;
}*/

.round-canvas .wedge > div {
  display: block;
  content: '';
  width: fit-content;
  position: absolute;
  left: 50%;
  top: 50%;
  transform-origin: 0 0;
  transform: rotate(calc(var(--i) * var(--alpha-deg) * 1deg)) translate(-50%, calc(-100% - var(--radius-em) * 1em));
}

.round-canvas .wedge > div > img {
  width: 1.3em;
  transform: rotate(calc((-1) * var(--i) * var(--alpha-deg) * 1deg));
}

.round-canvas .wedge::after {
  display: block;
  content: '';
  /* sides can't be in `em`s, because I need to divide one by another (which can't be done between `em`s) */
  width: calc(1em * var(--side1));
  height: calc(1em * var(--side1));
  position: absolute;
  top: 50%;
  left: 50%;
  transform-origin: 0 0;
  background-image: linear-gradient(135deg, var(--brand-color) calc(50% - var(--line-width) / 2), transparent calc(50% + var(--line-width) / 2));
  opacity: 75%;
  transform: rotate(calc(-90deg + var(--i) * var(--alpha-deg) * 1deg)) skew(calc((90 - var(--alpha-deg)) * 1deg)) scaleY(calc(var(--sin-alpha) * (var(--side2) / var(--side1))));
}

.programming-skills {
  align-content: center;
}

.programming-skills * {
  --side1: calc(var(--radius-em) * var(--this-skill) / var(--max-skill));
  --side2: calc(var(--radius-em) * var(--next-skill) / var(--max-skill));
  --n: var(--number-of-skills);
}
