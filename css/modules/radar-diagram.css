/* make documentation for radar diagram */

.round-canvas {
  display: block;
  content: '';
  position: relative;
  /* radius is assumed to be in `em`, but the unit can't be given explicitly; see below the reason */
  --radius-em: 10;
  --line-width: 0.5px;
  height: calc(2em * var(--radius-em) + var(--line-width));
  width: calc(2em * var(--radius-em) + var(--line-width));
  border-radius: 100%;
  /* similary, angles can't explicitly use the `deg` unit */
  --alpha-deg: calc(360 / var(--n));
  background: linear-gradient(30deg,  transparent                     calc(50% - var(--line-width)),
                                      var(--panel-bg-color-lighter)   calc(50% - var(--line-width) / 2),
                                      var(--panel-bg-color-lighter)   calc(50% + var(--line-width) / 2),
                                      transparent                     calc(50% + var(--line-width)),
                                      transparent                     100%),
              linear-gradient(90deg,  transparent                     calc(50% - var(--line-width)),
                                      var(--panel-bg-color-lighter)   calc(50% - var(--line-width) / 2),
                                      var(--panel-bg-color-lighter)   calc(50% + var(--line-width) / 2),
                                      transparent                     calc(50% + var(--line-width)),
                                      transparent 100%),
              linear-gradient(150deg, transparent                     calc(50% - var(--line-width)),
                                      var(--panel-bg-color-lighter)   calc(50% - var(--line-width) / 2),
                                      var(--panel-bg-color-lighter)   calc(50% + var(--line-width) / 2),
                                      transparent                     calc(50% + var(--line-width)),
                                      transparent 100%),
              repeating-radial-gradient(var(--panel-bg-color-lighter),
                                        var(--panel-bg-color-lighter) calc(var(--line-width) / 2),
                                        transparent                   var(--line-width),
                                        transparent                   calc(1em * var(--radius-em) / var(--max-skill-adj) - var(--line-width)),
                                        var(--panel-bg-color-lighter) calc(1em * var(--radius-em) / var(--max-skill-adj) - var(--line-width) / 2),
                                        var(--panel-bg-color-lighter) calc(1em * var(--radius-em) / var(--max-skill-adj)));
  overflow: hidden; /* to prevent the transparent half of the triangles
                     * from protruding beyond the element borders (which
                     * can result in a nasty behavior where an horizontal
                     * scroll bar appears because those elements protrude
                     * beyond `<html>`)
                     */
}

.round-canvas .wedge > div {
  display: block;
  content: '';
  width: fit-content;
  position: absolute;
  left: 50%;
  top: 50%;
  transform-origin: 0 0;
  transform: rotate(calc(var(--i) * var(--alpha-deg) * 1deg)) translate(-50%, calc(-1 * var(--radius-em) * 1em));
}

.round-canvas .wedge > div > img {
  width: 1.3em;
  transform: rotate(calc((-1) * var(--i) * var(--alpha-deg) * 1deg));
}

.round-canvas .wedge::after {
  display: block;
  content: '';
  /* sides can't be in `em`s, because I need to divide one by another (which can't be done between `em`s) */
  width: calc(1em * var(--side1));
  height: calc(1em * var(--side1));
  position: absolute;
  top: 50%;
  left: 50%;
  transform-origin: 0 0;
  background-image: linear-gradient(135deg, var(--brand-color) calc(50% - var(--line-width) / 2), transparent calc(50% + var(--line-width) / 2));
  opacity: 75%;
  transform: rotate(calc(-90deg + var(--i) * var(--alpha-deg) * 1deg)) skew(calc((90 - var(--alpha-deg)) * 1deg)) scaleY(calc(var(--sin-alpha) * (var(--side2) / var(--side1))));
}

.programming-skills  h2 {
  text-align: center;
}

.programming-skills * {
  --max-skill-adj: calc(var(--max-skill) + 1);
  --side1: calc(var(--radius-em) / var(--max-skill-adj) * var(--this-skill));
  --side2: calc(var(--radius-em) / var(--max-skill-adj) * var(--next-skill));
  --n: var(--number-of-skills);
}
